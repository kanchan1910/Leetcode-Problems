class Solution {
public:
  
    bool carPooling(vector<vector<int>>& trips, int capacity) 
    {
        int n = trips.size();
        vector<int>tmp(1001, 0);
        for(int i = 0; i < n; i++)
        {
            tmp[trips[i][1]] += trips[i][0];
            tmp[trips[i][2]] -= trips[i][0];
        }
        int capacity_at_a_time = 0;
        for(int i = 0; i <= 1000; i++)
        {
            capacity_at_a_time += tmp[i];
            if(capacity_at_a_time > capacity)
            {
                return false;
            }
        }
        return true;
    }
};
tc o(n) sc o(10001) or sc o(max(to))

=========================================
class Solution {
public:
    static bool comp(vector<int>& a, vector<int>& b)
    {
        return a[1] < b[1];
    }
    bool carPooling(vector<vector<int>>& trips, int capacity) 
    {
        int n = trips.size();
        sort(trips.begin(), trips.end(), comp);
        if(trips[0][0] > capacity)
        {
            return false;
        }
        capacity -= trips[0][0];
        int end = trips[0][2];
        for(int i = 1; i < n; i++)
        {
            if(trips[i][1] >= end)
            {
                capacity += trips[i - 1][0];
            }
            else
            {
                if(capacity < trips[i][0])
                {
                    return false;
                }
                else
                {
                    capacity -= trips[i][0];
                }
            }
        }
        return true;
    }
};
this solution went wrong on the test case
Input:
[[9,3,4],[9,1,7],[4,2,4],[7,4,5]]
23
Output:
false
Expected:
true

