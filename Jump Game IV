// class Solution {
// public:
//     int minJumps(vector<int>& arr) 
//     {
//         int n = arr.size();
//         unordered_map<int, vector<int>>m;
//         if(n == 1)
//         {
//             return 0;
//         }
//         for(int i = 0; i < n; i++)
//         {
//             m[arr[i]].push_back(i);
//         }

//         int ans = 0;
//         queue<int>q;
//         q.push(0);
//         while(!q.empty())
//         {
//             ans++;
//             for(int i = 0; i < q.size(); i++)
//             {
//                 int front = q.front();
//                 q.pop();
//                 if(front - 1 >= 0 && m.find(arr[front - 1]) != m.end())
//                 {
//                     q.push(front - 1);
//                 }
//                 if(front + 1 <= n - 1 && m.find(arr[front + 1]) != m.end())
//                 {
//                     if(front + 1 == n - 1)
//                     {
//                         return ans;
//                     }
//                     q.push(front + 1);
//                 }
//                 if(m.find(arr[front]) != m.end())
//                 {
//                     for(auto x: m[arr[front]])
//                     {
//                         if(x != front)
//                         {
//                             if(x == n - 1)
//                             {
//                                 return ans;
//                             }
//                             q.push(x);
//                         }
//                     }
//                 }
//                 if(m.find(arr[front]) != m.end())
//                 {
//                     m.erase(arr[front]);
//                 }
//             }
//         }
//         return -1;
//     }
// };

class Solution {
public:
    int minJumps(vector<int>& arr) 
    {
        int n = arr.size();
        if(n == 1)
        {
            return 0;
        }
        unordered_map<int, vector<int>> mp;
        
        int step = 0;
        
        //fill map
        for(int i = 0; i<n; i++)
        {
            mp[arr[i]].push_back(i);
        }
        
        //queue
        queue<int> q;
        q.push(0);
        
        while(!q.empty())
        {
            step++;
            int s = q.size();
            for(int i = 0; i < s; i++)
            {
                int front = q.front();
                q.pop();
                
                if(front-1 >= 0 && mp.find(arr[front - 1]) != mp.end())
                {
                    q.push(front-1);
                }
                
                if(front + 1 <= n - 1 && mp.find(arr[front + 1]) != mp.end())
                {
                    if(front + 1 == n - 1) 
                    {
                        return step;
                    }
                    q.push(front+1);
                }
                
                if(mp.find(arr[front]) != mp.end())
                {
                    for(auto x: mp[arr[front]])
                    {
                        if(x != front)
                        {
                            if(x == n-1)
                            {
                                return step;
                            }
                            q.push(x);
                        }
                    }
                }
                if(mp.find(arr[front]) != mp.end())
                {
                    mp.erase(arr[front]);   
                }
            }
        }
        return -1;
    }
};
tc o(n)
sc o(n)
