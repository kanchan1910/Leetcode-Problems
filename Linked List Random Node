/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int len = 0;
    ListNode* cur;
    Solution(ListNode* head) 
    {
        cur = head;
        while(cur != NULL)
        {
            cur = cur->next;
            len++;
        }
        cur = head;
    }
    
    int getRandom()
    {
        int random_index = rand() % len;
        // was thinking of removing ptr pointer also, and doing with only cur, bit it will give runtime error because, if getRamdon func if called again and again and cur is NULL the, cur = cur->next will give runtime error, but if ptr is used then [tr is always initialized to cur that is head, each time the function is called.
        ListNode* ptr = cur;
        for(int i = 0; i < random_index; i++)
        {
            ptr = ptr->next;
        }
        return ptr->val;
    }
};
tc o(n) sc o(1)
