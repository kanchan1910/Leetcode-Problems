house robber i
class Solution {
public:
    int rob(vector<int>& nums) 
    {
        int n =  nums.size();
        // greedy will fail {2,1,1,2}
        // will go for dp approach
        vector<int>dp(n, -1);
        dp[0] = nums[0];
        if(n == 1)
        {
            return dp[0];
        }
        dp[1] = max(nums[0], nums[1]);
        for(int i = 2; i < n; i++)
        {
            int taking = nums[i] + dp[i - 2];
            int not_taking = dp[i - 1];
            dp[i] = max(taking, not_taking);
        }
        return dp[n - 1];
    }
};
tc o(n) sc o(n)
==============================
class Solution {
public:
    int rob(vector<int>& nums) 
    {
        int n =  nums.size();
        // greedy will fail {2,1,1,2}
        // will go for dp approach
        int a, b, c;
        a = nums[0];
        if(n == 1)
        {
            return a;
        }
        b = max(nums[0], nums[1]);
        if(n == 2)
        {
            return b;
        }
        for(int i = 2; i < n; i++)
        {
            int taking = nums[i] + a;
            int not_taking = b;
            c = max(taking, not_taking);
            a = b;
            b = c;            
        }
        return c;
    }
};
tc o(n) sc o(1)

house robber ii
class Solution {
public:
    int rob(vector<int>& nums) 
    {
        int n = nums.size();
        vector<int>dp(n);
        dp[0] = nums[0];
        if(n == 1)
        {
            return nums[0];
        }
        dp[1] = max(nums[0], nums[1]);
        for(int i = 2; i < n - 1; i++)
        {
            int taking = nums[i] + dp[i - 2];
            int not_taking = dp[i - 1];
            dp[i] = max(taking, not_taking);
        }
        int ans1 = dp[n - 2];
        dp[1] = nums[1];
        if(n == 2)
        {
            return max(ans1, dp[1]);
        }
        dp[2] = max(nums[1], nums[2]);
        for(int i = 3; i < n; i++)
        {
            int taking = nums[i] + dp[i - 2];
            int not_taking = dp[i - 1];
            dp[i] = max(taking, not_taking);
        }
        int ans2 = dp[n - 1];
        return max(ans1, ans2);
    }
};
tc o(n) sc o(n)

house robber iii
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<int, int>fun(TreeNode* root)
    {
        if(root == NULL)
        {
            return {0, 0};
        }
        pair<int, int>left = fun(root->left);
        pair<int, int>right = fun(root->right);
        int with_cur_root = root->val + left.second + right.second;
        int without_cur_root = max(left.first, left.second) + max(right.first, right.second);
        return {with_cur_root, without_cur_root};
    }
    int rob(TreeNode* root) 
    {
        if(root == NULL)
        {
            return 0;
        }
        // {with root, without root}
        pair<int, int>ans = fun(root);
        return max(ans.first, ans.second);
    }
};
tc o(n) sc o(h), h is height of the tree
