
class Solution{
public:
int fun(string& str, int i, int j, unordered_map<string, int>& m, bool flag)
{
    if(i > j)
    {
        return 0;
    }
    if(i == j)
    {
        if(flag == true)
        {
            return str[i] == 'T';
        }
        else
        {
            return str[i] == 'F';
        }
    }
    string tmp = to_string(i) + " " + to_string(j) + " " + to_string(flag);
    if(m.find(tmp) != m.end())
    {
        return m[tmp];
    }
    int ans = 0;
    for(int k = i + 1; k <= j - 1; k += 2)
    {
        int lt = fun(str, i, k - 1, m, true);
        int rt = fun(str, k + 1, j, m, true);
        int lf = fun(str, i, k - 1, m, false);
        int rf = fun(str, k + 1, j, m, false);
        if(str[k] == '^')
        {
            if(flag == true)
            {
                ans += (lt * rf + lf * rt);
            }
            else
            {
                ans += (lt * rt + lf * rf);
            }
        }
        else if(str[k] == '|')
        {
            if(flag == true)
            {
                ans += (lt * rt + lt * rf + lf * rt);
            }
            else
            {
                ans += (lf * rf);
            }
        }
        else if(str[k] == '&')
        {
            if(flag == true)
            {
                ans += (lt * rt);
            }
            else
            {
                ans += (lt * rf + lf * rt + lf * rf);
            }
        }
    }
    return m[tmp] = ans % 1003;
}
    int countWays(int n, string str)
    {
        unordered_map<string, int>m;
        return fun(str, 0, n - 1, m, true);
    }
};
refer https://youtu.be/bzXM1Zond9U
or 3D dp can be made instead of map
