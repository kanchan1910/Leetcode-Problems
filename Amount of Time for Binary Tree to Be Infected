/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* search(TreeNode* root, int target)
    {
        if(root == NULL)
        {
            return NULL;
        }
        if(root->val == target)
        {
            return  root;
        }
        TreeNode* left = search(root->left, target);
        TreeNode* right = search(root->right, target);
        if(left == NULL && right == NULL)
        {
            return NULL;
        }
        if(left != NULL)
        {
            return left;
        }
        return right;
    }
    int amountOfTime(TreeNode* root, int start) {
        int time = 0;
    
        TreeNode* node = search(root, start);
        
       // cout << node->val << endl;
        unordered_map<TreeNode*, TreeNode*>parent;
        queue<TreeNode*>q, qq;
        q.push(root);
        parent[root] = NULL;
        
        unordered_map<TreeNode*, bool>vis;
        
        while(!q.empty())
        {
            TreeNode* front = q.front();
            q.pop();
            vis[front] = false;
            if(front->left != NULL)
            {
                q.push(front->left);
                parent[front->left] = front;
            }
            if(front->right != NULL)
            {
                q.push(front->right);
                parent[front->right] = front;
            }
        }
        qq.push(node);
        bool f = false;
        // for(auto x: parent)
        // {
        //     cout << x.first->val << " " << x.second->val << endl;
        // }
        
        vis[node] = true;
        while(!qq.empty())
        {
            f = false;
            int sz = qq.size();
            for(int i = 0; i < sz; i++)
            {

                TreeNode* front = qq.front();
                qq.pop();
                if(front->left != NULL && vis[front->left] == false)
                {
                    f = true;
                    vis[front->left] = true;
                    qq.push(front->left);
                }
                if(front->right != NULL && vis[front->right] == false)
                {
                    f = true;
                    vis[front->right] = true;
                    qq.push(front->right);
                }
                if(parent[front] != NULL && vis[parent[front]] == false)
                {
                    f = true;
                    vis[parent[front]] = true;
                    qq.push(parent[front]);
                }
            }
            if(f == true)
            {
                time++;
            }
        }
        return time;
    }
};
