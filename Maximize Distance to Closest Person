class Solution {
public:
    int maxDistToClosest(vector<int>& seats)
    {
        int n = seats.size();
        int ans = 0;
        int left = -1;
        for(int i = 0; i < n; i++)
        {
            if(seats[i] == 1)
            {
                if(left == -1)
                {
                    left = i;
                }
                else
                {
                    ans = max(ans, (i - left) / 2);
                    left = i;
                }
            }
        }
        for(int i = 0; i < n; i++)
        {
            if(seats[i] == 1)
            {
                ans = max(ans, i);
                break;
            }
        }
        for(int i = n - 1; i >= 0; i--)
        {
            if(seats[i] == 1)
            {
                ans = max(ans, n - 1 - i);
                break;
            }
        }
        return ans;
    }
};
tc o(n) sc o(1)

class Solution {
public:
    int maxDistToClosest(vector<int>& seats)
    {
        int n = seats.size();
        int ans = 0;
        vector<int>ones;
        for(int i = 0; i < n; i++)
        {
            if(seats[i] == 1)
            {
                ones.push_back(i);
            }
        }
        for(int i = 0; i < n; i++)
        {
            if(seats[i] == 0)
            {
                int dis = INT_MAX;
                for(int j = 0; j < ones.size(); j++)
                {
                    dis = min(dis, abs(i - ones[j]));
                }
                ans = max(ans, dis);
            }
        }
        return ans;
    }
};
tc o(n * n) sc o(1)
