class Solution {
public:
    int countWords(vector<string>& words1, vector<string>& words2)
    {
        int count = 0;
        unordered_map<string, int>m1, m2;
        for(int i = 0; i < words1.size(); i++)
        {
            m1[words1[i]]++;
        }
        for(int i = 0; i < words2.size(); i++)
        {
            m2[words2[i]]++;
        }
        for(int i = 0; i < words1.size(); i++)
        {
            if(m1[words1[i]] == 1)
            {
                if(m2.find(words1[i]) != m2.end() && m2[words1[i]] == 1)
                {
                    count++;
                }
            }
        }
        return count;
    }
};
tc o(n) sc o(n), using 2 hash maps
=================================================================================================================
class Solution {
public:
    int countWords(vector<string>& words1, vector<string>& words2)
    {
        int ans = 0;
        unordered_map<string, int>m;
        for(int i = 0; i < words1.size(); i++)
        {
            m[words1[i]]++;
        }
        for(auto x : m)
        {
            if(x.second > 1)
            {
                m[x.first] = -1; 
            }
        }
        for(auto x: words2)
        {
            m[x]--;
        }
        for(auto x: m)
        {
            if(x.second == 0)
            {
                ans++;
            }
        }
        return ans;
    }

};
tc o(n) sc o(n), using a single hash map
