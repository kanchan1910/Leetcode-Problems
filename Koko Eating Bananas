class Solution {
public:
    int hoursNeeded(vector<int>& piles, int k)
    {
        int ans = 0;
        for(int i = 0; i < piles.size(); i++)
        {
            if(piles[i] <= k)
            {
                ans++;
            }
            else
            {
                ans += ceil(piles[i] * 1.0 / k);
            }
        }
        return ans;
    }
    int minEatingSpeed(vector<int>& piles, int h)
    {
        int n = piles.size();
        int l = 1;
        int r = *max_element(piles.begin(), piles.end());
        int ans = -1;
        while(l <= r)
        {
            int mid = (l + r) / 2;
            int hours = hoursNeeded(piles, mid);
            if(hours > h)
            {
                l = mid + 1;
            }
            else
            {
                ans = mid;
                r = mid - 1;
            }
        }
        return ans;
    }
};

tc o(nlogn)
sc o(1)
