
class Solution {
public:
    struct comp
    {
        bool operator()(ListNode *a, ListNode *b)
        {
            return a->val > b->val;
        }
   };
    ListNode* mergeKLists(vector<ListNode*>& lists) 
    {
        int n = lists.size();
        if(n == 0)
        {
            return NULL;
        }
        if(n == 1)
        {
            return lists[0];
        }
        priority_queue<ListNode*, vector<ListNode*>, comp>pq;
        for(int i = 0; i < n; i++)
        {
            if(lists[i] != NULL)
            {
                pq.push(lists[i]);
            }
        }
        ListNode* dummy = new ListNode(0);
        ListNode* tmp = dummy;
        while(!pq.empty())
        {
            ListNode* front = pq.top();
            pq.pop();
            tmp->next = front;
            tmp = tmp->next;
            if(front->next != NULL)
            {
                pq.push(front->next);
            }
        }
        return dummy->next;
    }
};
