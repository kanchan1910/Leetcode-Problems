class Solution {
public:
    int fun(vector<int>& arr, int n, int m)
    {
        int ans = 0;
        // next smaller to left
        vector<int>left;
        stack<pair<int, int>>s;
        for(int i = 0; i < m; i++)
        {
            if(s.empty())
            {
                left.push_back(-1);
            }
            else
            {
                if(s.top().first < arr[i])
                {
                    left.push_back(s.top().second);
                }
                else
                {
                    while(s.size() > 0 && s.top().first >= arr[i])
                    {
                        s.pop();
                    }
                    if(s.empty())
                    {
                        left.push_back(-1);
                    }
                    else
                    {
                        left.push_back(s.top().second);
                    }
                }
            }
            s.push({arr[i], i});
        }
        // will store next smaller element to the right
        vector<int>right;
        stack<pair<int, int>>ss;
        for(int i = m - 1; i >= 0; i--)
        {
            if(ss.empty())
            {
                right.push_back(m);
            }
            else
            {
                if(ss.top().first < arr[i])
                {
                    right.push_back(ss.top().second);
                }
                else
                {
                    while(ss.size() > 0 && ss.top().first >= arr[i])
                    {
                        ss.pop();
                    }
                    if(ss.empty())
                    {
                        right.push_back(m);
                    }
                    else
                    {
                        right.push_back(ss.top().second);
                    }
                }
            }
            ss.push({arr[i], i});
        }
        reverse(right.begin(), right.end());
        for(int i = 0; i < m; i++)
        {
            ans = max(ans, arr[i] * (right[i] - left[i] - 1));
        }
        return ans;
    }
    int maximalRectangle(vector<vector<char>>& mat)
    {
        int n = mat.size();
        int m = mat[0].size();
        int ans = 0;
        vector<int>v(m);
        for(int j = 0; j < m; j++)
        {
            v[j] = (mat[0][j] - '0');
        }
        ans = max(ans, fun(v, n, m));
        for(int i = 1; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(mat[i][j] == '0')
                {
                    v[j] = 0;
                }
                else
                {
                    v[j] += 1;
                }
            }
            ans = max(ans, fun(v, n, m));
        }
        return ans;
    }
};
tc o(n * m) sc o(m)
