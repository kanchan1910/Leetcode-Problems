class Solution {
public:
    int largestRectangleArea(vector<int>& h) 
    {
        int n = h.size();
        stack<pair<int, int>>s;
        vector<int>next_smaller_in_left;
        for(int i = 0; i < n; i++)
        {
            if(s.empty())
            {
                next_smaller_in_left.push_back(-1);
            }
            else
            {
                if(s.top().first < h[i])
                {
                    next_smaller_in_left.push_back(s.top().second);
                }
                else
                {
                    while(!s.empty() && s.top().first >= h[i])
                    {
                        s.pop();
                    }
                    if(s.empty())
                    {
                        next_smaller_in_left.push_back(-1);
                    }
                    else
                    {
                        next_smaller_in_left.push_back(s.top().second);
                    }
                }
            }
            s.push({h[i], i});
        }
        while(!s.empty())
        {
            s.pop();
        }
        vector<int>next_smaller_in_right;
        for(int i = n - 1; i >= 0; i--)
        {
            if(s.empty())
            {
                next_smaller_in_right.push_back(n);
            }
            else
            {
                if(s.top().first < h[i])
                {
                    next_smaller_in_right.push_back(s.top().second);
                }
                else
                {
                    while(!s.empty() && s.top().first >= h[i])
                    {
                        s.pop();
                    }
                    if(s.empty())
                    {
                        next_smaller_in_right.push_back(n);
                    }
                    else
                    {
                        next_smaller_in_right.push_back(s.top().second);
                    }
                }
            }
            s.push({h[i], i});
        }
        reverse(next_smaller_in_right.begin(), next_smaller_in_right.end());
        
        int ans = INT_MIN;
        for(int i = 0; i < n; i++)
        {
            ans = max(ans, h[i] * (next_smaller_in_right[i] - next_smaller_in_left[i] - 1));
        }
        return ans;
    }
};
