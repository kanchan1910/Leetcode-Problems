
class Solution {
public:
    bool isIdentical(TreeNode* root1, TreeNode* root2)
    {
        if(root1 == NULL && root2 == NULL)
        {
            return true;
        }
        if(root1 == NULL || root2 == NULL)
        {
            return false;
        }
        return root1->val == root2->val && isIdentical(root1->left, root2->left) && isIdentical(root1->right, root2->right);
    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) 
    {
        if(root == NULL)
        {
            return false;
        }
        if(subRoot == NULL)
        {
            return true;
        }
        if(isIdentical(root, subRoot) == true)
        {
            return true;
        }
        return isSubtree(root->left, subRoot) || isSubtree(root->right, subRoot);
    }
};
tc o(n * n) sc o(n)

class Solution {
public:
    void inorder(TreeNode* root, string& str)
    {
        if(root == NULL)
        {
            str += "N";
            return;
        }
        inorder(root->left, str);
        str += to_string(root->val);
        str += '/';
        inorder(root->right, str);
    }
    void preorder(TreeNode* root, string& str)
    {
        if(root == NULL)
        {
            str += "N";
            return;
        }
        str += to_string(root->val);
        str += '/';
        preorder(root->left, str);
        preorder(root->right, str);
    }
    bool isSubtree(TreeNode* root1, TreeNode* root2) 
    {
        if(root1 == NULL)
        {
            return false;
        }
        if(root2 == NULL)
        {
            return true;
        }
        string str1 = "", str2 = "";
        inorder(root1, str1);
        inorder(root2, str2);
      //  cout << str1 << " " << str2 << endl;
        if(str1.find(str2) == string:: npos)
        {
            return false;
        }
        string strr1 = "", strr2 = "";
        preorder(root1, strr1);
        preorder(root2, strr2);
      //  cout << strr1 << " " << strr2 << endl;
        if(strr1.find(strr2) == string:: npos)
        {
            return false;
        }
        return true;
    }
};

tc o(n) sc o(n)
      
      
//   1
// 2   3
      
      
//       1
//      2
  n2/n1/n3/n

  n2/n1/n

  1/2/nn3/nn

  1/2/nnn


  2/1/3/
  2/1/

  1/2/3/
  1/2/
