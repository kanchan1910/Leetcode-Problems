class Solution {
public:
    void dfs(int &ans, int node, vector<bool>& vis, vector<int>adj[])
    {
        ans++;
        vis[node] = true;
        for(auto child : adj[node])
        {
            if(vis[child] == false)
            {
                dfs(ans, child, vis, adj);
            }
        }
    }
    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) 
    {
        vector<int>adj[n];
        for(int i = 0; i < edges.size(); i++)
        {
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        vector<bool>vis(n, false);
         for(int i = 0; i < restricted.size(); i++)
        {
            vis[restricted[i]] = true;
        }
        int ans = 0;
        dfs(ans, 0, vis, adj);
        return ans;
         
    }
};
 
