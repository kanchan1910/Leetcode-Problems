class Solution {
public:
    int fun(vector<vector<int>>& grid, int& n, int& m, int i, int j, vector<vector<int>>& dp)
    {
        if(i >= n || j >= m || grid[i][j] == 1)
        {
            return 0;
        }
        if(i == n - 1 && j == m - 1)
        {
            return 1;
        }
        if(dp[i][j] != -1)
        {
            return dp[i][j];
        }
        return dp[i][j] = fun(grid, n, m, i + 1, j, dp) + fun(grid, n, m, i, j + 1, dp);
    }
    int uniquePathsWithObstacles(vector<vector<int>>& grid) 
    {
        int n = grid.size();
        int m = grid[0].size();
        if(grid[0][0] == 1 || grid[n - 1][m - 1] == 1)
        {
            return 0;
        }
        vector<vector<int>>dp(n, vector<int>(m, -1));
        return fun(grid, n, m, 0, 0, dp);
    }
};
