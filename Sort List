/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    ListNode* merge(ListNode* a, ListNode* b)
    {
        if(a == NULL)
        {
            return b;
        }
        if(b == NULL)
        {
            return a;
        }
        ListNode* dummy = new ListNode(0);
        ListNode* tmp = dummy;
        while(a != NULL && b != NULL)
        {
            if(a->val <= b->val)
            {
                tmp->next = a;
                a = a->next;
            }
            else
            {
                tmp->next = b;
                b = b->next;
            }
            tmp = tmp->next;
        }
        while(a != NULL)
        {
            tmp->next = a;
            tmp = tmp->next;
            a = a->next;
        }
        while(b != NULL)
        {
            tmp->next = b;
            tmp = tmp->next;
            b = b->next;
        }
        return dummy->next;
    }
    
 
    ListNode* sortList(ListNode* head) 
    {
        if(head == NULL || head->next == NULL)
        {
            return head;
        }
        ListNode* slow = head;
        ListNode* fast = head->next;
        while(fast != NULL && fast->next != NULL)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode* newHead = slow->next;
        slow->next = NULL;
        return merge(sortList(head), sortList(newHead));
    }
};

   
