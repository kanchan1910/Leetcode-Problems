class Solution {
public:
    int subarraysWithKDistinct(vector<int>& nums, int k)
    {
        // brute force solution
        int ans = 0;
        int n = nums.size();
        for(int i = 0; i < n; i++)
        {
            unordered_set<int>s;
            for(int j = i; j < n; j++)
            {
                s.insert(nums[j]);
                if(s.size() == k)
                {
                    ans++;
                }
                if(s.size() > k)
                {
                    break;
                }
            }
        }
        return ans;
    }
};
TLE 
tc o(n * n) sc o(n)


class Solution {
public:
    int fun(vector<int>& nums, int k)
    {
        // optimized solution
        int ans = 0;
        int n = nums.size();
        unordered_map<int, int>m;
        int start = 0;
        for(int i = 0; i < n; i++)
        {
            m[nums[i]]++;
            
            while(m.size() > k)
            {
                m[nums[start]]--;
                if(m[nums[start]] == 0)
                {
                    m.erase(nums[start]);
                }
                start++;
            }
            ans += (i - start + 1);
        }
        return ans;
    }
    int subarraysWithKDistinct(vector<int>& nums, int k)
    {
        cout << fun(nums, k) << " " << fun(nums, k - 1) << endl;
        return fun(nums, k) - fun(nums, k - 1);
    }
};
tc o(n) sc o(n)
