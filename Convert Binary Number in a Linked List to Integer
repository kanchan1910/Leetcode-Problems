/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int getDecimalValue(ListNode* head)
    {
        vector<int>tmp;
        ListNode* cur = head;
        while(cur != NULL)
        {
            tmp.push_back(cur->val);
            cur = cur->next;
        }
        reverse(tmp.begin(), tmp.end());
        int ans = 0;
        int num = 1;
        for(int i = 0; i < tmp.size(); i++)
        {
            ans += (num * tmp[i]);
            num *= 2;
        }
        return ans;
    }
};

tc o(n) sc o(n)


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int getDecimalValue(ListNode* head)
    {
        int ans = 0;
        while(head != NULL)
        {
            ans = ans * 2 + head->val;
            head = head->next;
        }
        return ans;
    }
};

tc o(n) sc o(1)
