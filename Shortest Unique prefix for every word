class TrieNode{
public:
    TrieNode* children[26] = {NULL};
    int used=0;
};

class Solution
{
private:
    TrieNode* root;
    void insertString(string s){
        TrieNode* curr=root;
        for(char x:s){
            int idx=x-'a';
            if(!curr->children[idx])
                curr->children[idx]= new TrieNode();
            curr->used++;
            curr=curr->children[idx];
        }
    }
    string getUniquePrefixes(string& s){
        TrieNode* curr=root;
        string toReturn="";
        for(char x:s){
            int idx=x-'a';
            if(curr->used==1) break;
            toReturn+=x;
            curr=curr->children[idx];
        }
        return toReturn;
    }
public:
    vector<string> findPrefixes(string arr[], int n)
    {
        root=new TrieNode();
        vector<string> ans;
        for(int i=0;i<n;i++)
            insertString(arr[i]);
        for(int i=0;i<n;i++)
            ans.push_back(getUniquePrefixes(arr[i]));
        return ans;
    }
};
