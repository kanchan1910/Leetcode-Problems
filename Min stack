3 ways :

class MinStack {
public:
    /** initialize your data structure here. */
    stack<int>s1, s2;
    MinStack() {
        
    }
    
    void push(int val)
    {
        s1.push(val);
        if(s2.empty())
        {
            s2.push(val);
        }
        else
        {
            if(val <= s2.top())
            {
                s2.push(val);
            }
        }
    }
    
    void pop() 
    {
        int ele = s1.top();
        s1.pop();
        if(s2.top() == ele)
        {
            s2.pop();
        }
    }
    
    int top()
    {
        return s1.top();
    }
    
    int getMin()
    {
        return s2.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
 
 
 ---------------------------------------------------------------------------------------------
 class MinStack {
public:
    /** initialize your data structure here. */
    stack<pair<int, int>>s;
    MinStack() {
        
    }
    
    void push(int val)
    {
        if(s.empty())
        {
            s.push({val, val});
        }
        else
        {
            s.push({val, min(val, s.top().second)});
        }
    }
    
    void pop() 
    {
        s.pop();
    }
    
    int top()
    {
        return s.top().first;
    }
    
    int getMin()
    {
        return s.top().second;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
 
 ----------------------------------------------------------------------------------------
 class MinStack {
private:
    stack<int> s;
    int min;
public:
    /** initialize your data structure here. */
    MinStack() {
        min = INT_MAX;
    }
    
    void push(int x) {
        if (x <= min)
        {
            s.push(min);
            min = x;
        }
        s.push(x);
    }
    
    void pop() {
        if (s.top() == min)
        {
            s.pop();
            min = s.top();
            s.pop();
        }
        else
        {
            s.pop();
        }
    }
    
    int top() {
        return s.top();
    }
    
    int getMin() {
        return min;
    }
};
 
