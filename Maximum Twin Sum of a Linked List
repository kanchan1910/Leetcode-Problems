/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head)
    {
        ListNode* prev = NULL;
        ListNode* cur = head;
        while(cur != NULL)
        {
            ListNode* next = cur->next;
            cur->next = prev;
            prev = cur;
            cur = next;
        }
        return prev;
    }
    int pairSum(ListNode* head) 
    {
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast != NULL)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode* newHead = reverse(slow);
        int ans = 0;
        ListNode* cur = head;
        ListNode* curr = newHead;
        while(curr != NULL)
        {
            ans = max(ans, cur->val + curr->val);
            cur = cur->next;
            curr = curr->next;
        }
        return ans;
    }
};
tc o(n) sc o(1)
